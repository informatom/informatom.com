I"√<h2 id="social-media-f√§higkeiten">Social Media F√§higkeiten</h2>

<p>Mercator hat in dieser Woche einige F√§higkeiten im Bezug auf die
Interaktion mit den Besuchern der Seite bekommen.</p>

<p>Wir haben nun eine einfach Blogging-Engine geschrieben, die ein
hierarchisches Kommentarsystem beinhaltet. Da sich User nicht
langm√§chtig anmelden wollen, haben wir ein minimales Anmeldeformular
(mit den Feldern E-Mail Adresse, Vorname und Familienname)
implementiert. Nach Ausf√ºllen und Absenden erh√§lt die Person ein E-Mail
mit Freischaltlink. Nach Anklicken dessen kann unmittelbar kommentiert
werden.</p>

<h3 id="minimales-anmeldeformular">Minimales Anmeldeformular</h3>

<hr />

<p><img src="/img/blog/anmeldeformular.png" alt="Anmeldeformular" style="max-width: 100%" /></p>
<hr />

<h3 id="kommentarfeld">Kommentarfeld</h3>

<hr />

<p><img src="/img/blog/kommentarfeld.png" alt="Kommentarfeld" style="max-width: 100%" /></p>
<hr />

<p>Es besteht nun auch die M√∂glichkeit, sich unmittelbar auf der Startseite
anzumelden.</p>

<p>Der Blog verwendet die altbekannten Bausteine aus dem CMS, die ab nun
nicht nur per WYSIWYG-Editor, sondern auch im Plaintext-Editor
<a href="http://codemirror.net/">Codemirror</a> erstellt werden k√∂nnen. Neben
HTML unterst√ºtzen wir nun Textile und Markdown als weitere
Markupsprachen. All diese Artikel sind in Textile verfasst, wir k√∂nnen
sie damit einfach in Mercator √ºbernehmen und publizieren.</p>

<p>Blogposts k√∂nnen mit Schlagworten versehen und kategorisiert werden.
Nebenbei unterst√ºtzen wir nun auch mehrere Contentslider. Das sind
Javascript Bibliotheken, mit denen meist Diashow-√§hnliche Vorf√ºhrungen
auf Startseiten von Webauftritten implementiert werden.</p>

<h2 id="performance">Performance</h2>

<p>Fast durch Zufall ist uns eine deutliche Performance Steigerung
gelungen. Das erste Referenzsystem haben wir in Rails Stagingumgebung
genannt (staging) und nicht als Produktivumgebung (production). Die
Konfigurationseinstellungen haben wir vom Produktionssystem √ºbernommen.
Dabei haben wir nicht bedacht, das manche Konfigurationsoptionen den
Namen auf ‚Äúproduction‚Äù explizit abfragen. Damit haben wir unn√∂tige
Eintr√§ge (die Entwickler nennen das Logl√§rm) im Logfile erzeugt. Das ist
unn√∂tig und nervt beim Debuggen, kostet aber kaum Performance.</p>

<p>Sehr wohl aber war es ung√ºnstig, alle Assets (Bilder, CSS-Files und
Javascript-Files) vom Applikationsserver ausliefern zu lassen, anstelle
vorzukompilieren und unmittelbar vom Webserver auszuliefern.</p>

<p>Diesen Fehler (wer ihn urspr√ºnglich eingebaut hatten, wollen wir gar
nicht wissen‚Ä¶) haben wir behoben. Damit reduziert sich die Serverlast
seitens des Applikationsservers auf etwa die H√§lfte, womit doppelt so
viele Requests abgearbeitet werden k√∂nnen. Nebenbei werden die Assets
vom Webserver an alle modernen Browser auch on the fly komprimiert
(gezippt), womit die Menge der √ºbertragenen Daten bei CSS und Javascript
etwa auf 20% reduziert wird. (Bilder in den √ºblichen Webformaten gif,
png oder jpeg lassen sich de facto nicht oder kaum komprimieren). Auch
waren nicht alle Cacheheader richtig gesetzt. Damit wurden manche Assets
von Browsern bei jedem Seitenwechsel neu geladen, statt aus dem
Browsercache bezogen.</p>

<p>Wir sehen damit Ladezeiten einer typischen Startseite von unter einer
Sekunde beim ersten Aufruf, bei weiteren unter einer halben Sekunde. Das
war eine erfreuliche Neujahrs√ºberraschung.</p>

<h2 id="vermischtes">Vermischtes</h2>

<ul>
  <li>Der Importjob f√ºr Legacy Datenbanken wurde im Bereich
Kategorienimport und Produktzuordnung erweitert. Dieser Job wird f√ºr
das zweite produktive Referenzsystem ben√∂tigt.</li>
  <li>Im Contentmanager haben wir die Selektion per Drag &amp; Drop
verbessert.</li>
</ul>
:ET