I"„<h2 id="anmeldung-per-e-mail">Anmeldung per E-Mail</h2>

<p>Wir kennen die Situation selbst nur zu gut: Man muss sich auf einer
Webseite wieder anmelden, auf der man sich vor Jahren registriert hat
und kennt das Kennwort nicht mehr.</p>

<p>Meist kann man sich dann einen Link zusenden lassen, dann das Kennwort
neu eingeben, evtl. ein weiteres Email best√§tigen und sich dann neu
anmelden.</p>

<p>Wir haben nun eine ebenso sichere, aber wesentlich schnellere L√∂sung f√ºr
die Kunden implementiert. Man gibt bei der Anmeldung wahlweise nur seine
E-Mail Adresse ein und erh√§lt einen Login-Link per E-Mail der 5 Minuten
G√ºltigkeit hat. Klickt man im E-Mail Client auf den Link, landet man
angemeldet im Shop. Wir verzichten weiters darauf, den User zu zwingen,
sein Kennwort zu √§ndern, er kann dies aber nat√ºrlich freiwillig tun.</p>

<p>Wir haben bereits diese Funkion f√ºr Test-User sch√§tzen gelernt und
nutzen sie so selbst regelm√§√üig.</p>

<h3 id="login-link">Login Link</h3>

<hr />

<p><img src="/img/blog/login-link.png" alt="Login Link" style="max-width: 100%" /></p>
<hr />

<p>Wir haben uns dazu entschlossen, die E-Mailadresse als die
User-Identifikation zu verwenden. Wollen Kunden meherere Accouts
parrellel benutzen, k√∂nnen Sie dies mit mehreren E-Mail Adressen bequem
tun. Die Kennwortverschl√ºsselung ist per Salt gesichert, des bedeutet,
dass jedes Kennwort vor der Verschl√ºsselung nochmals mit einem
Zufallsstring modifiziert wird. Sollte unsere verschl√ºsselte
Kennwortdatenbank in fremde H√§nde gelangen, ist damit eine
Entschl√ºsselung √ºber Rainbow Tables ausgeschlossen. Unter Rainbow Tables
versteht man W√∂rterb√ºcher, die zu Kennw√∂rtern und
Verschl√ºsselungsalgorithmen Hashtabellen verzeichnen. Man k√∂nnte damit,
kennt man ein Kennwort und seinen Hash aus der Tabelle aller Hashes alle
Kennw√∂rter unmittelbar entschl√ºsseln.</p>

<h2 id="javascript-frontend-framework">Javascript Frontend Framework</h2>

<p>F√ºr die Kalkulation komplexerer Angebote ist der aktuell implementierte
Mechanismus unpraktisch bis nicht tauglich: Jede √Ñnderung, die vom
Vertriebsmitarbeiter durchgef√ºhrt wird, wird zum Server √ºbertragen. Die
Position und das Angebot wird am Server neu berechnet und das Ergebnis
wird zu den Browsern von Vertriebsmitarbeiter und Kunde √ºbertragen und
die Ansicht aktualisiert.</p>

<p>Um die Sache m√∂glichst fl√ºssig und schnell zu gestalten, verwenden wir
keine klassischen Formulare, die per Post Requests gesendet werden.
Dabei w√ºrde anschlie√üend nach ablauf der Controller-Logik die gesamte
Webseite am Server neu generiert und dann an die beiden Browser
√ºbermittelt. Wir verwenden schon jetzt Ajax-Requests, bei denen nur die
ge√§nderten Seitenteile (‚ÄúPartials‚Äù) √ºbertragen werden und dann vom
Browser an die entsprechenden Stellen auf der Webseite eingebaut werden.</p>

<p>F√ºr komplexe Angebote, bei denen viele Parameter f√ºr den
Kundenmitarbeiter zu ber√ºcksichtigen sind, ist dieser Vorgang dennoch zu
langsam und die Kalkulation am Server m√ºhselig. Wir werden vermutlich
f√ºr diesen Fall ein clientseitiges Javascript Framework einsetzen. Die
Evaluierung der unterschiedlichen Frameworks ist derzeit im Gang. Wir
m√ºssen besonders auf die Kompatibilit√§t zu unserer Hobo-Anwendung
achten, m√∂chten wir doch m√∂glichst wenig der existierenden Anwendung
√§ndern und eine m√∂glichst einfache Weiterentwicklung betreiben.</p>

<p>So ein Framework wird es im Gegensatz zu den bisher erstellten Seiten
dem Browser erm√∂glichen, die Struktur der Daten zu verstehen und den
Server Arbeit abnehmen k√∂nnen. Erst die Ergebnisse werden dann an den
Server √ºbertragen, √ºberpr√ºft und auf die Datenbank persistiert sowie zum
Kunden √ºbertragen.</p>

<h2 id="weiteres">Weiteres</h2>

<p>Die Installation des ersten Referenzsystems hat begonnen.</p>
:ET