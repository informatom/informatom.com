I"™<h2 id="design">Design</h2>

<p>Als Pixelschubsen bezeichnen unsere Entwickler despektierlich die
Anpassung des User Interfaces an die Gestaltungsrichtlinien, die durch
den Designer vorgegeben werden.</p>

<p>(‚Ä¶ obwohl sie im direkten Gespr√§ch zugeben, dass nur dadurch die Seite
ansehnlich wird.)</p>

<p>In dieser Woche haben wir also um ein konsistentes Look &amp; Feel f√ºr alle
Teile gek√ºmmert, die die Endkunden zu sehen bekommen. Das betrifft:</p>

<ul>
  <li>die Konversationen, die ab jetzt Beratungssessions heissen,</li>
  <li>der Videochat,</li>
  <li>das Feedback Formular,</li>
  <li>das Benutzerprofil,</li>
  <li>die Produktdetailansicht,</li>
  <li>die Kategorienansicht ,</li>
  <li>die Filternavigation ,</li>
  <li>das Angebot in HTML und PDF Format,</li>
  <li>die Cobrosingsessions inklusive dem Textchat und</li>
  <li>den Produktvergleich.</li>
</ul>

<h3 id="konsistenz-des-userinterfaces-muss-zb-auch-das-userprofil-umfassen">Konsistenz des Userinterfaces muss z.B. auch das Userprofil umfassen</h3>

<hr />

<p><img src="/img/blog/konsistenz.png" alt="Konsistenz" style="max-width: 100%" /></p>
<hr />

<h2 id="update">Update</h2>

<p>Zum dar√ºber Streuen mussten wir diese Woche aus Sicherheitsgr√ºnden
sowohl Ruby als auch Ruby on Rails auf allen Demo, Staging- und
Entwicklungssystemen aktualisieren. Ruby gar zweimal, zun√§chst auf
Version 2.1.4, dann auf 2.1.5. Angenehmer weise gab es dabei keine
relevanten Probleme, die Updates ben√∂tigten aber doch einige Stunden an
Zeit. Als Spinoff haben wir alle RVM-Installationen aufger√§umt (RVM ist
der von uns verwendete Ruby Versionsmanager) und die Kurzanleitung zum
Update √ºberarbeitet. Es war erfreulich festzustellen, dass wir die
Infrastruktur doch gut im Griff haben, es gab keinerlei Downtime.</p>

<h2 id="video-chat">Video-Chat</h2>

<p>Mit der Video Chat Komponente hatten wir bislang eine Art Leiche im
Keller. Wir verwenden f√ºr den Videochat selbst WebRTC
(http://www.webrtc.org/), das ist standardisiert und soweit in Ordnung.
F√ºr die Initialisierung setzen wir JQuery Plugin, das auf einen von der
Firma Fresh Tilled Soil (http://www.freshtilledsoil.com/) betriebenen
Signalling Server aufbaut.</p>

<p>Zur Erl√§uterung: Dieser Server und eine weitere Komponente namens STUN &amp;
TURN-Server helfen den beteilten Browsern einander im Internet zu
finden. Wenn sie einander gefunden haben, erfolgt die Kommunikation auf
der direkten Route zwischen den Kommunikationspartnern und ist auf den
Signalling Server nicht mehr angewiesen. Das sorgt f√ºr die geringe
Latenz in WebRTC Kommunikationen.</p>

<p>Fresh Tilled Soil gestattet und ermutigt diesen Server zu verwenden.
Sollte Fresh Tilled Soil allerdings dieses Service einstellen, w√ºrden
die Browser einander nicht mehr finden, wir haben hier also einen Single
Point of Failure. Oder besser gesagt: Wir hatten‚Ä¶</p>

<p>Wir haben diesbez√ºglich recherchiert und k√∂nnen auf EasyRTC wechseln
(<a href="http://www.easyrtc.com/">http://www.easyrtc.com/</a>), bei dieser L√∂sung k√∂nnen wir alle ben√∂tigten
Komponenten selbst installieren und betreiben.</p>

<p>Es gibt allerdings leider weiterhin keine Unterst√ºtzung f√ºr WebRTC
seitens des Microsoft Internet Explorers. Es gibt aber, und das ist die
erfreuliche Nachricht in diesem Zusammenhang eine
<a href="http://blogs.msdn.com/b/ie/archive/2014/10/27/bringing-interoperable-real-time-communications-to-the-web.aspx">Ank√ºndigung von Microsoft</a>
vom 27.10., dass sich das √§ndern wird.</p>
:ET