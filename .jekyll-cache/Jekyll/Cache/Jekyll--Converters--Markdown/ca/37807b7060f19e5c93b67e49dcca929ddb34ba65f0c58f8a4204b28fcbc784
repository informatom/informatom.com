I"‹	<p>Wir halten uns an den Vorsatz, ausschlie√ülich testgetrieben zu
entwickeln. Wir bemerken die zu erwartende h√∂here Entwicklungzeit.
Erwarten aber auch, dass sich die nun investierte Zeit wieder rechnen
wird.</p>

<p>Es wurden bereits erste Fehler durch die automatischen Tests gefunden, die sonst erst
zu sp√§terer Projektzeit gefunden worden w√§ren.</p>

<p>Haben einzelne Programmierer bereits fr√ºherer mittels BDD (behaviour
driven development) end-to-end Tests geschrieben, die recht aufw√§ndig
ausgefallen sind und zu betr√§chtlicher Laufzeit eines automatischen
Testlaufs gef√ºhrt haben, bleiben wir derzeit bei Unit Tests auf der
Modellebene. Die Tests sind klein, testen jeweils nur genau einen Aspekt
des Modells. Es sind viele, sie laufen aber auch sehr schnell durch (die
ersten 100 Tests in rund 7 Sekunden).</p>

<p>Das Scaffolding mit Hobo funktioniert gut, bei jeder Abweichung merken
wir aber auch noch die mangelnde Erfahrung mit DRYML.</p>

<p>F√ºr die Baumstrukturen haben wir nun eine Drag and Drop Komponente
entwickelt, die in der Hobo Entwickler-Community gut aufgenommen wurde.
Wir haben hier f√ºr uns zum ersten Mal zwei Javascript Bibliotheken
(Messenger.js und JQuery Nestable) in und mit Hobos DRYML integriert.
Die Integration war erfreulich unproblematisch und wir haben nun eine
Baumstruktur, die von ihrer Bedienbarkeit und ihrem Aussehen her absolut
Enduser-tauglich ist. Die Ver√∂ffentlichung als Gist findet man [hier]
(https://gist.github.com/haslinger/7776874/a068b4e7ef84371f5a3c1fdcc363abfd3a42e104).
Gists sind kleine Code-Repositories zur Ver√∂ffentlichung von Anleitungen
auf <a href="https://gist.github.com/">Github</a>.</p>

<p>Wir entwickeln zu unserer eigenen √úberraschung bereits zwei DRYML-Stile:</p>

<ul>
  <li>Manche Entwickler schreiben Views in DRYML und verwenden diese dann
wie ERB-Views.</li>
  <li>Die anderen schreiben und √ºberschreiben DRYML Tags, die in den
automatisch generierten Views gezogen werden.</li>
</ul>

<p>Wir sind unschl√ºssig, welchen Stil wir bevorzugen wollen, der erste
scheint f√ºr speziellere Aufgaben geeigneter, der zweite f√ºr
wiederverwendbare Komponenten. Beinahe jeder lernt t√§glich neue
Komponenten von DRYML hinzu.</p>

<p>DRYML ist von seiner M√§chtigkeit her beinahe erdr√ºckend. Es erscheint in
manchen Situationen aber bereits verwunderlich, wie wir ohne DRYML
auskommen konnten.</p>

<p>Hobo ist stabil, weitere aufgetauchte Fragen zu Unklarheiten wurden von
der Hobo Community stets innerhalb zweier Tage beantwortet.</p>
:ET