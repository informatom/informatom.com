I"˝<h2 id="e-payment-modul">E-Payment Modul</h2>

<p>In dieser Woche haben wir das E-Payment Modul implementiert. Dabei haben
wir uns bislang auf den Minimalfall beschr√§nkt (ein Payment-Provider,
minimale Daten√ºbertragung). Wir haben aber die Schnittstelle als
eigenst√§ndiges Gem implementiert. Das bedeutet, dass wir f√ºr weitere
Zahlungsprovider das Gem als Ganzes kopieren k√∂nnen, die Schnittstelle
zur API des alternativen Anbieter implementieren und damit rasch eine
weiteren Payment-Anbieter einbinden k√∂nnen.</p>

<h2 id="templatebearbeitung">Templatebearbeitung</h2>

<p>Das Editieren der Templates mit dem von uns verwendeten WYSIWYG-Editor
CKEditor ist f√ºr die Entwickler und Designer ausgesprochen unangenehm.
Beide Gruppen wollen den Code beim Schreiben sehen, nicht die gerenderte
Voransicht. Doch auch die Quellcodeansicht ist nicht sehr angenehm: Der
Editor nicht f√ºr DRYML ausgelegt, sein Syntaxhighlighting funktioniert
daher nur beschr√§nkt.</p>

<p>Wir haben daher f√ºr die Websitetemplates auf den ebenfalls
Javascript-basierten Editor Codemirror umgestellt, der sich, obwohl er
vollst√§ndig im Browser l√§uft und damit nichts lokal installiert werden
muss, beinahe wie ein nativ im Betriebssystem laufender Editor anf√ºhlt.
DRYML ist ein XML-Derivat und das Syntax-Highlighting f√ºr XML
funktioniert f√ºr DRYML ausgezeichnet, so werden etwa fehlerhafte Tags
angemerkt.</p>

<h3 id="beispiel-des-unterst√ºtzenden-syntaxhighlighting-in-codemirror">Beispiel des unterst√ºtzenden Syntaxhighlighting in Codemirror</h3>

<p>Der Editor erkennt, dass der Tag in Zeile 18 nicht stimmt, da er nicht
zum ge√∂ffnetet <code class="highlighter-rouge">&lt;div&gt;</code> passt, des zu schlie√üen ist und unterstreicht den
Fehler.</p>

<hr />

<p><img src="/img/blog/codemirror.png" alt="Codemirror" style="max-width: 100%" /></p>
<hr />

<p>Im Screenshot erkennt man etwa auch in den Zeilen 25, 26, 27 die von uns
geschriebenen DRYML-Tags <code class="highlighter-rouge">&lt;admin /&gt; &lt;skype-and-tel /&gt; &lt;basket-info /&gt;</code>
die des erstellen von Webseitenvorlagen beschleunigen. Sie werden
serverseitig zun√§chst zu ERB und weiter zu HTML und Javascript
kompiliert und dann an den Browser ausgeliefert. Damit bietet uns DRYML
Webcomponents im Sinne der W3C Spezifikation f√ºr Custom Elements
<a href="http://w3c.github.io/webcomponents/spec/custom/">http://w3c.github.io/webcomponents/spec/custom/</a> bereits jetzt.</p>

<h2 id="friendly-ids">Friendly IDs</h2>

<p>Als neues Feature hat unsere CMS-Kompontente Friedly IDs f√ºr die
einzelnen Webseiten.</p>

<p>Das bedeutet, dass statt eines kryptischen URL</p>

<p><code>http://shop.example.com/webpages/27</code></p>

<p>nicht nur wie im Hobo-Standard der Titel der Webseite angeh√§ngt wird</p>

<p><code>http://shop.example.com/webpages/27-support</code></p>

<p>sondern die ID g√§nzlich entfallen kann:</p>

<p><code>http://shop.example.com/webpages/support</code></p>

<p>Der Kunde kann den dargestellten Text (in der Fachsprache slug genannt)
nun frei w√§hlen</p>

<p><code>http://shop.example.com/webpages/wir-helfen-gerne</code></p>

<p>und das Routing wurde insofern ge√§ndert, dass bei Webseiten auch der
Ressourcenteil entfallen kann:</p>

<p><code>http://shop.example.com/wir-helfen-gerne</code></p>

<h2 id="vermischtes">Vermischtes</h2>

<ul>
  <li>Bei einer Kundenbesprechung haben wir kleinere Prozessfehler
entdeckt, die ebenfalls diese Woche behoben wurden.</li>
  <li>Im Demosystem haben wir eine Datenbereinigung durchgef√ºhrt, um
Verwirrung bei Interessenten zu vermeiden.</li>
</ul>
:ET